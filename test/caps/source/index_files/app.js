'use strict';

document.addEventListener('dragover', function (event) {
  event.preventDefault();
  return false;
}, false);

document.addEventListener('drop', function (event) {
  event.preventDefault();
  return false;
}, false);

/**
 * External Modules
 */
requireNodeModule('@uirouter/angularjs');
requireNodeModule('angular-material');
requireNodeModule('angular-local-storage');
requireNodeModule('angular-qrcode');

window.qrcode = requireNodeModule('qrcode-generator');

/**
 * 
 */
requireAppModule('angular/app.templates');

/**
 * main module: 'kyc-wallet'
 */
window.app = angular.module('kyc-wallet', ['ngMaterial', 'ui.router', 'templates', 'LocalStorageModule', 'monospaced.qrcode']);

/**
 * Internal Modules
 */
const appRun = requireAppModule('angular/configs/app.run');
const appStates = requireAppModule('angular/configs/app.states');

/**
 * constants
 */
const AppConfigConstant = requireAppModule('config', true);

let extraConfig = isDevMode() ? AppConfigConstant.default : AppConfigConstant.production;
const config = Object.assign(AppConfigConstant.common, extraConfig);

angular.module('kyc-wallet').constant('CONFIG', config);

const appDictionaryConstant = requireAppModule('angular/constants/app.dictionary.constant');
angular.module('kyc-wallet').constant('DICTIONARY', appDictionaryConstant);

const appEventsConstant = requireAppModule('angular/constants/app.events.constant');
angular.module('kyc-wallet').constant('EVENTS', appEventsConstant);

const countriesConstant = requireAppModule('angular/constants/countries');
angular.module('kyc-wallet').constant('countries', countriesConstant);

/**
 * services
 */
const ElectronService = requireAppModule('angular/services/electron.service');
angular.module('kyc-wallet').service('ElectronService', ElectronService);

const ConfigFileService = requireAppModule('angular/services/config-file.service');
angular.module('kyc-wallet').service('ConfigFileService', ConfigFileService);

const CommonService = requireAppModule('angular/services/common.service');
angular.module('kyc-wallet').service('CommonService', CommonService);

const EtherScanService = requireAppModule('angular/services/ether-scan.service');
angular.module('kyc-wallet').service('EtherScanService', EtherScanService);

const MEWService = requireAppModule('angular/services/mew.service');
angular.module('kyc-wallet').service('MEWService', MEWService);

const Web3Service = requireAppModule('angular/services/web3.service');
angular.module('kyc-wallet').service('Web3Service', Web3Service);

const EtherUnitsService = requireAppModule('angular/services/ether-units.service');
angular.module('kyc-wallet').service('EtherUnitsService', EtherUnitsService);

const WalletService = requireAppModule('angular/services/wallet.service');
angular.module('kyc-wallet').service('WalletService', WalletService);

const TokenService = requireAppModule('angular/services/token.service');
angular.module('kyc-wallet').service('TokenService', TokenService);

const SelfkeyService = requireAppModule('angular/services/selfkey.service');
angular.module('kyc-wallet').service('SelfkeyService', SelfkeyService);

/**
 * directives
 */
const SkLoadingDirective = requireAppModule('angular/directives/commons/sk-loading.directive');
angular.module('kyc-wallet').directive('skLoading', SkLoadingDirective);

const SkIconDirective = requireAppModule('angular/directives/commons/sk-icon.directive');
angular.module('kyc-wallet').directive('skIcon', SkIconDirective);

const SkMessageDirective = requireAppModule('angular/directives/commons/sk-message.directive');
angular.module('kyc-wallet').directive('skMessage', SkMessageDirective);

const SkSelectIfDirective = requireAppModule('angular/directives/commons/sk-select-if.directive');
angular.module('kyc-wallet').directive('skSelectIf', SkSelectIfDirective);

const skShowLoading = requireAppModule('angular/directives/commons/sk-show-loading.directive');
angular.module('kyc-wallet').directive('skShowLoading', skShowLoading);

const SkLinearProgressDirective = requireAppModule('angular/directives/commons/sk-linear-progress.directive');
angular.module('kyc-wallet').directive('skLinearProgress', SkLinearProgressDirective);

const skSlider = requireAppModule('angular/directives/commons/sk-slider.directive');
angular.module('kyc-wallet').directive('skSlider', skSlider);

const SkDoubleHeaderDirective = requireAppModule('angular/directives/commons/sk-double-header.directive');
angular.module('kyc-wallet').directive('skDoubleHeader', SkDoubleHeaderDirective);

const SkTokenBoxDirective = requireAppModule('angular/directives/commons/sk-token-box.directive');
angular.module('kyc-wallet').directive('skTokenBox', SkTokenBoxDirective);

const SkIcoDetailsBoxDirective = requireAppModule('angular/directives/commons/sk-ico-details-box.directive');
angular.module('kyc-wallet').directive('skIcoDetailsBox', SkIcoDetailsBoxDirective);

const SkRightSidenavDirective = requireAppModule('angular/directives/commons/sk-right-sidenav.directive');
angular.module('kyc-wallet').directive('skRightSidenav', SkRightSidenavDirective);

const SkCirclePieChartDirective = requireAppModule('angular/directives/commons/sk-circle-pie-chart.directive');
angular.module('kyc-wallet').directive('skCirclePieChart', SkCirclePieChartDirective);

const SkRemindersBoxDirective = requireAppModule('angular/directives/commons/sk-reminders-box.directive');
angular.module('kyc-wallet').directive('skRemindersBox', SkRemindersBoxDirective);

const SkUserInfoBoxDirective = requireAppModule('angular/directives/commons/sk-user-info-box.directive');
angular.module('kyc-wallet').directive('skUserInfoBox', SkUserInfoBoxDirective);

const SkKycRequirementsBoxDirective = requireAppModule('angular/directives/commons/sk-kyc-requirements-box.directive');
angular.module('kyc-wallet').directive('skKycRequirementsBox', SkKycRequirementsBoxDirective);

const ScrollToEndDirective = requireAppModule('angular/directives/commons/scroll-to-end.directive');
angular.module('kyc-wallet').directive('scrollToEnd', ScrollToEndDirective);

const CopyToClipboardDirective = requireAppModule('angular/directives/commons/copy-to-clipboard.directive');
angular.module('kyc-wallet').directive('copyToClipboard', CopyToClipboardDirective);

/**
 * controllers
 */

/**
 * commons
 */
const TermsDialogController = requireAppModule('angular/controllers/commons/dialogs/terms-controller.js');
angular.module('kyc-wallet').controller('TermsDialogController', TermsDialogController);

const StartupGuideDialogController = requireAppModule('angular/controllers/commons/dialogs/startup-guide-controller.js');
angular.module('kyc-wallet').controller('StartupGuideDialogController', StartupGuideDialogController);

const ReceiveTokenDialogController = requireAppModule('angular/controllers/commons/dialogs/receive-token-controller.js');
angular.module('kyc-wallet').controller('ReceiveTokenDialogController', ReceiveTokenDialogController);

const SendTokenDialogController = requireAppModule('angular/controllers/commons/dialogs/send-token-controller.js');
angular.module('kyc-wallet').controller('SendTokenDialogController', SendTokenDialogController);

const UpdateDialogController = requireAppModule('angular/controllers/commons/dialogs/update-controller.js');
angular.module('kyc-wallet').controller('UpdateDialogController', UpdateDialogController);

/**
 * guest
 */
const GuestLayoutController = requireAppModule('angular/controllers/guest/layout-controller.js');
angular.module('kyc-wallet').controller('GuestLayoutController', GuestLayoutController);

const GuestLoadingController = requireAppModule('angular/controllers/guest/loading-controller.js');
angular.module('kyc-wallet').controller('GuestLoadingController', GuestLoadingController);

/**
 * const wallet
 */
const GuestImportWalletController = requireAppModule('angular/controllers/guest/import/import-controller.js');
angular.module('kyc-wallet').controller('GuestImportWalletController', GuestImportWalletController);

const GuestImportKeystoreController = requireAppModule('angular/controllers/guest/import/keystore-controller.js');
angular.module('kyc-wallet').controller('GuestImportKeystoreController', GuestImportKeystoreController);

const GuestImportPrivateKeyController = requireAppModule('angular/controllers/guest/import/private-key-controller.js');
angular.module('kyc-wallet').controller('GuestImportPrivateKeyController', GuestImportPrivateKeyController);

/**
 * create wallet
 */
const GuestKeystoreCreateStep1Controller = requireAppModule('angular/controllers/guest/create/step-1-controller.js');
angular.module('kyc-wallet').controller('GuestKeystoreCreateStep1Controller', GuestKeystoreCreateStep1Controller);

const GuestKeystoreCreateStep2Controller = requireAppModule('angular/controllers/guest/create/step-2-controller.js');
angular.module('kyc-wallet').controller('GuestKeystoreCreateStep2Controller', GuestKeystoreCreateStep2Controller);

const GuestKeystoreCreateStep3Controller = requireAppModule('angular/controllers/guest/create/step-3-controller.js');
angular.module('kyc-wallet').controller('GuestKeystoreCreateStep3Controller', GuestKeystoreCreateStep3Controller);

const GuestKeystoreCreateStep4Controller = requireAppModule('angular/controllers/guest/create/step-4-controller.js');
angular.module('kyc-wallet').controller('GuestKeystoreCreateStep4Controller', GuestKeystoreCreateStep4Controller);

/**
 * member
 */
const MemberLayoutController = requireAppModule('angular/controllers/member/layout-controller.js');
angular.module('kyc-wallet').controller('MemberLayoutController', MemberLayoutController);

const MemberRightSidenavController = requireAppModule('angular/controllers/member/right-sidenav-controller.js');
angular.module('kyc-wallet').controller('MemberRightSidenavController', MemberRightSidenavController);

/**
 * setup
 */
const MemberSetupViewKeystoreController = requireAppModule('angular/controllers/member/setup/view-keystore-controller.js');
angular.module('kyc-wallet').controller('MemberSetupViewKeystoreController', MemberSetupViewKeystoreController);

const MemberSetupChooseController = requireAppModule('angular/controllers/member/setup/choose-controller.js');
angular.module('kyc-wallet').controller('MemberSetupChooseController', MemberSetupChooseController);

const MemberSetupCompletedController = requireAppModule('angular/controllers/member/setup/completed-controller.js');
angular.module('kyc-wallet').controller('MemberSetupCompletedController', MemberSetupCompletedController);

/**
 * dashboard
 */
const MemberDashboardMainController = requireAppModule('angular/controllers/member/dashboard/main-controller.js');
angular.module('kyc-wallet').controller('MemberDashboardMainController', MemberDashboardMainController);

/**
 * wallet
 */
const ManageTokenController = requireAppModule('angular/controllers/member/wallet/manage-token-controller.js');
angular.module('kyc-wallet').controller('ManageTokenController', ManageTokenController);

/**
 * Marketplace
 */
const MemberMarketplaceIcoItemController = requireAppModule('angular/controllers/member/marketplace/ico/item-controller.js');
angular.module('kyc-wallet').controller('MemberMarketplaceIcoItemController', MemberMarketplaceIcoItemController);

const MemberMarketplaceIcoAcceptTermsController = requireAppModule('angular/controllers/member/marketplace/ico/accept-terms-controller.js');
angular.module('kyc-wallet').controller('MemberMarketplaceIcoAcceptTermsController', MemberMarketplaceIcoAcceptTermsController);

/**
 * config states
 */
angular.module('kyc-wallet').config(appStates);

/**
 * config run
 */
angular.module('kyc-wallet').run(appRun);

/**
 * bootstrap app
 */
/*
angular.bootstrap(document, ['kyc-wallet'], {
  strictDi: true
});
*/
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmVxdWlyZU5vZGVNb2R1bGUiLCJ3aW5kb3ciLCJxcmNvZGUiLCJyZXF1aXJlQXBwTW9kdWxlIiwiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImFwcFJ1biIsImFwcFN0YXRlcyIsIkFwcENvbmZpZ0NvbnN0YW50IiwiZXh0cmFDb25maWciLCJpc0Rldk1vZGUiLCJkZWZhdWx0IiwicHJvZHVjdGlvbiIsImNvbmZpZyIsIk9iamVjdCIsImFzc2lnbiIsImNvbW1vbiIsImNvbnN0YW50IiwiYXBwRGljdGlvbmFyeUNvbnN0YW50IiwiYXBwRXZlbnRzQ29uc3RhbnQiLCJjb3VudHJpZXNDb25zdGFudCIsIkVsZWN0cm9uU2VydmljZSIsInNlcnZpY2UiLCJDb25maWdGaWxlU2VydmljZSIsIkNvbW1vblNlcnZpY2UiLCJFdGhlclNjYW5TZXJ2aWNlIiwiTUVXU2VydmljZSIsIldlYjNTZXJ2aWNlIiwiRXRoZXJVbml0c1NlcnZpY2UiLCJXYWxsZXRTZXJ2aWNlIiwiVG9rZW5TZXJ2aWNlIiwiU2VsZmtleVNlcnZpY2UiLCJTa0xvYWRpbmdEaXJlY3RpdmUiLCJkaXJlY3RpdmUiLCJTa0ljb25EaXJlY3RpdmUiLCJTa01lc3NhZ2VEaXJlY3RpdmUiLCJTa1NlbGVjdElmRGlyZWN0aXZlIiwic2tTaG93TG9hZGluZyIsIlNrTGluZWFyUHJvZ3Jlc3NEaXJlY3RpdmUiLCJza1NsaWRlciIsIlNrRG91YmxlSGVhZGVyRGlyZWN0aXZlIiwiU2tUb2tlbkJveERpcmVjdGl2ZSIsIlNrSWNvRGV0YWlsc0JveERpcmVjdGl2ZSIsIlNrUmlnaHRTaWRlbmF2RGlyZWN0aXZlIiwiU2tDaXJjbGVQaWVDaGFydERpcmVjdGl2ZSIsIlNrUmVtaW5kZXJzQm94RGlyZWN0aXZlIiwiU2tVc2VySW5mb0JveERpcmVjdGl2ZSIsIlNrS3ljUmVxdWlyZW1lbnRzQm94RGlyZWN0aXZlIiwiU2Nyb2xsVG9FbmREaXJlY3RpdmUiLCJDb3B5VG9DbGlwYm9hcmREaXJlY3RpdmUiLCJUZXJtc0RpYWxvZ0NvbnRyb2xsZXIiLCJjb250cm9sbGVyIiwiU3RhcnR1cEd1aWRlRGlhbG9nQ29udHJvbGxlciIsIlJlY2VpdmVUb2tlbkRpYWxvZ0NvbnRyb2xsZXIiLCJTZW5kVG9rZW5EaWFsb2dDb250cm9sbGVyIiwiVXBkYXRlRGlhbG9nQ29udHJvbGxlciIsIkd1ZXN0TGF5b3V0Q29udHJvbGxlciIsIkd1ZXN0TG9hZGluZ0NvbnRyb2xsZXIiLCJHdWVzdEltcG9ydFdhbGxldENvbnRyb2xsZXIiLCJHdWVzdEltcG9ydEtleXN0b3JlQ29udHJvbGxlciIsIkd1ZXN0SW1wb3J0UHJpdmF0ZUtleUNvbnRyb2xsZXIiLCJHdWVzdEtleXN0b3JlQ3JlYXRlU3RlcDFDb250cm9sbGVyIiwiR3Vlc3RLZXlzdG9yZUNyZWF0ZVN0ZXAyQ29udHJvbGxlciIsIkd1ZXN0S2V5c3RvcmVDcmVhdGVTdGVwM0NvbnRyb2xsZXIiLCJHdWVzdEtleXN0b3JlQ3JlYXRlU3RlcDRDb250cm9sbGVyIiwiTWVtYmVyTGF5b3V0Q29udHJvbGxlciIsIk1lbWJlclJpZ2h0U2lkZW5hdkNvbnRyb2xsZXIiLCJNZW1iZXJTZXR1cFZpZXdLZXlzdG9yZUNvbnRyb2xsZXIiLCJNZW1iZXJTZXR1cENob29zZUNvbnRyb2xsZXIiLCJNZW1iZXJTZXR1cENvbXBsZXRlZENvbnRyb2xsZXIiLCJNZW1iZXJEYXNoYm9hcmRNYWluQ29udHJvbGxlciIsIk1hbmFnZVRva2VuQ29udHJvbGxlciIsIk1lbWJlck1hcmtldHBsYWNlSWNvSXRlbUNvbnRyb2xsZXIiLCJNZW1iZXJNYXJrZXRwbGFjZUljb0FjY2VwdFRlcm1zQ29udHJvbGxlciIsInJ1biJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLFNBQVNDLGdCQUFULENBQTBCLFVBQTFCLEVBQXNDLFVBQVVDLEtBQVYsRUFBaUI7QUFDckRBLFFBQU1DLGNB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OUI7QUFDQUUsUUFBUUMsTUFBUixDQUFlLFlBQWYsRUFBNkI4QyxVQUE3QixDQUF3Qyx1QkFBeEMsRUFBaUVvQixxQkFBakU7O0FBRUE7OztBQUdBLE1BQU1DLHFDQUFxQ3RFLGlCQUFpQiwrREFBakIsQ0FBM0M7QUFDQUUsUUFBUUMsTUFBUixDQUFlLFlBQWYsRUFBNkI4QyxVQUE3QixDQUF3QyxvQ0FBeEMsRUFBOEVxQixrQ0FBOUU7O0FBRUEsTUFBTUMsNENBQTRDdkUsaUJBQWlCLHVFQUFqQixDQUFsRDtBQUNBRSxRQUFRQyxNQUFSLENBQWUsWUFBZixFQUE2QjhDLFVBQTdCLENBQXdDLDJDQUF4QyxFQUFxRnNCLHlDQUFyRjs7QUFFQTs7O0FBR0FyRSxRQUFRQyxNQUFSLENBQWUsWUFBZixFQUE2QlEsTUFBN0IsQ0FBb0NOLFNBQXBDOztBQUVBOzs7QUFHQUgsUUFBUUMsTUFBUixDQUFlLFlBQWYsRUFBNkJxRSxHQUE3QixDQUFpQ3BFLE1BQWpDOztBQUVBOzs7QUFHQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIHJldHVybiBmYWxzZTtcbn0sIGZhbHNlKTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICByZXR1cm4gZmFsc2U7XG59LCBmYWxzZSk7XG5cbi8qKlxuICogRXh0ZXJuYWwgTW9kdWxlc1xuICovXG5yZXF1aXJlTm9kZU1vZHVsZSgnQHVpcm91dGVyL2FuZ3VsYXJqcycpO1xucmVxdWlyZU5vZGVNb2R1bGUoJ2FuZ3VsYXItbWF0ZXJpYWwnKTtcbnJlcXVpcmVOb2RlTW9kdWxlKCdhbmd1bGFyLWxvY2FsLXN0b3JhZ2UnKTtcbnJlcXVpcmVOb2RlTW9kdWxlKCdhbmd1bGFyLXFyY29kZScpO1xuXG53aW5kb3cucXJjb2RlID0gcmVxdWlyZU5vZGVNb2R1bGUoJ3FyY29kZS1nZW5lcmF0b3InKTtcblxuXG4vKipcbiAqIFxuICovXG5yZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2FwcC50ZW1wbGF0ZXMnKTtcblxuLyoqXG4gKiBtYWluIG1vZHVsZTogJ2t5Yy13YWxsZXQnXG4gKi9cbndpbmRvdy5hcHAgPSBhbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcsIFtcbiAgJ25nTWF0ZXJpYWwnLFxuICAndWkucm91dGVyJyxcbiAgJ3RlbXBsYXRlcycsXG4gICdMb2NhbFN0b3JhZ2VNb2R1bGUnLFxuICAnbW9ub3NwYWNlZC5xcmNvZGUnXG5dKTtcblxuLyoqXG4gKiBJbnRlcm5hbCBNb2R1bGVzXG4gKi9cbmNvbnN0IGFwcFJ1biA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29uZmlncy9hcHAucnVuJyk7XG5jb25zdCBhcHBTdGF0ZXMgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbmZpZ3MvYXBwLnN0YXRlcycpO1xuXG4vKipcbiAqIGNvbnN0YW50c1xuICovXG5jb25zdCBBcHBDb25maWdDb25zdGFudCA9IHJlcXVpcmVBcHBNb2R1bGUoJ2NvbmZpZycsIHRydWUpO1xuXG5sZXQgZXh0cmFDb25maWcgPSBpc0Rldk1vZGUoKSA/IEFwcENvbmZpZ0NvbnN0YW50LmRlZmF1bHQgOiBBcHBDb25maWdDb25zdGFudC5wcm9kdWN0aW9uO1xuY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbihBcHBDb25maWdDb25zdGFudC5jb21tb24sIGV4dHJhQ29uZmlnKTtcblxuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb25zdGFudCgnQ09ORklHJywgY29uZmlnKTtcblxuY29uc3QgYXBwRGljdGlvbmFyeUNvbnN0YW50ID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb25zdGFudHMvYXBwLmRpY3Rpb25hcnkuY29uc3RhbnQnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29uc3RhbnQoJ0RJQ1RJT05BUlknLCBhcHBEaWN0aW9uYXJ5Q29uc3RhbnQpO1xuXG5jb25zdCBhcHBFdmVudHNDb25zdGFudCA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29uc3RhbnRzL2FwcC5ldmVudHMuY29uc3RhbnQnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29uc3RhbnQoJ0VWRU5UUycsIGFwcEV2ZW50c0NvbnN0YW50KTtcblxuY29uc3QgY291bnRyaWVzQ29uc3RhbnQgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnN0YW50cy9jb3VudHJpZXMnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29uc3RhbnQoJ2NvdW50cmllcycsIGNvdW50cmllc0NvbnN0YW50KTtcblxuXG4vKipcbiAqIHNlcnZpY2VzXG4gKi9cbmNvbnN0IEVsZWN0cm9uU2VydmljZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvc2VydmljZXMvZWxlY3Ryb24uc2VydmljZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5zZXJ2aWNlKCdFbGVjdHJvblNlcnZpY2UnLCBFbGVjdHJvblNlcnZpY2UpO1xuXG5jb25zdCBDb25maWdGaWxlU2VydmljZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvc2VydmljZXMvY29uZmlnLWZpbGUuc2VydmljZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5zZXJ2aWNlKCdDb25maWdGaWxlU2VydmljZScsIENvbmZpZ0ZpbGVTZXJ2aWNlKTtcblxuY29uc3QgQ29tbW9uU2VydmljZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvc2VydmljZXMvY29tbW9uLnNlcnZpY2UnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0Jykuc2VydmljZSgnQ29tbW9uU2VydmljZScsIENvbW1vblNlcnZpY2UpO1xuXG5jb25zdCBFdGhlclNjYW5TZXJ2aWNlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9zZXJ2aWNlcy9ldGhlci1zY2FuLnNlcnZpY2UnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0Jykuc2VydmljZSgnRXRoZXJTY2FuU2VydmljZScsIEV0aGVyU2NhblNlcnZpY2UpO1xuXG5jb25zdCBNRVdTZXJ2aWNlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9zZXJ2aWNlcy9tZXcuc2VydmljZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5zZXJ2aWNlKCdNRVdTZXJ2aWNlJywgTUVXU2VydmljZSk7XG5cbmNvbnN0IFdlYjNTZXJ2aWNlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9zZXJ2aWNlcy93ZWIzLnNlcnZpY2UnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0Jykuc2VydmljZSgnV2ViM1NlcnZpY2UnLCBXZWIzU2VydmljZSk7XG5cbmNvbnN0IEV0aGVyVW5pdHNTZXJ2aWNlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9zZXJ2aWNlcy9ldGhlci11bml0cy5zZXJ2aWNlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLnNlcnZpY2UoJ0V0aGVyVW5pdHNTZXJ2aWNlJywgRXRoZXJVbml0c1NlcnZpY2UpO1xuXG5jb25zdCBXYWxsZXRTZXJ2aWNlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9zZXJ2aWNlcy93YWxsZXQuc2VydmljZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5zZXJ2aWNlKCdXYWxsZXRTZXJ2aWNlJywgV2FsbGV0U2VydmljZSk7XG5cbmNvbnN0IFRva2VuU2VydmljZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvc2VydmljZXMvdG9rZW4uc2VydmljZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5zZXJ2aWNlKCdUb2tlblNlcnZpY2UnLCBUb2tlblNlcnZpY2UpO1xuXG5jb25zdCBTZWxma2V5U2VydmljZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvc2VydmljZXMvc2VsZmtleS5zZXJ2aWNlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLnNlcnZpY2UoJ1NlbGZrZXlTZXJ2aWNlJywgU2VsZmtleVNlcnZpY2UpO1xuXG4vKipcbiAqIGRpcmVjdGl2ZXNcbiAqL1xuY29uc3QgU2tMb2FkaW5nRGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvc2stbG9hZGluZy5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdza0xvYWRpbmcnLCBTa0xvYWRpbmdEaXJlY3RpdmUpO1xuXG5jb25zdCBTa0ljb25EaXJlY3RpdmUgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2RpcmVjdGl2ZXMvY29tbW9ucy9zay1pY29uLmRpcmVjdGl2ZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5kaXJlY3RpdmUoJ3NrSWNvbicsIFNrSWNvbkRpcmVjdGl2ZSk7XG5cbmNvbnN0IFNrTWVzc2FnZURpcmVjdGl2ZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvZGlyZWN0aXZlcy9jb21tb25zL3NrLW1lc3NhZ2UuZGlyZWN0aXZlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmRpcmVjdGl2ZSgnc2tNZXNzYWdlJywgU2tNZXNzYWdlRGlyZWN0aXZlKTtcblxuY29uc3QgU2tTZWxlY3RJZkRpcmVjdGl2ZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvZGlyZWN0aXZlcy9jb21tb25zL3NrLXNlbGVjdC1pZi5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdza1NlbGVjdElmJywgU2tTZWxlY3RJZkRpcmVjdGl2ZSk7XG5cbmNvbnN0IHNrU2hvd0xvYWRpbmcgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2RpcmVjdGl2ZXMvY29tbW9ucy9zay1zaG93LWxvYWRpbmcuZGlyZWN0aXZlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmRpcmVjdGl2ZSgnc2tTaG93TG9hZGluZycsIHNrU2hvd0xvYWRpbmcpO1xuXG5jb25zdCBTa0xpbmVhclByb2dyZXNzRGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvc2stbGluZWFyLXByb2dyZXNzLmRpcmVjdGl2ZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5kaXJlY3RpdmUoJ3NrTGluZWFyUHJvZ3Jlc3MnLCBTa0xpbmVhclByb2dyZXNzRGlyZWN0aXZlKTtcblxuY29uc3Qgc2tTbGlkZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2RpcmVjdGl2ZXMvY29tbW9ucy9zay1zbGlkZXIuZGlyZWN0aXZlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmRpcmVjdGl2ZSgnc2tTbGlkZXInLCBza1NsaWRlcik7XG5cbmNvbnN0IFNrRG91YmxlSGVhZGVyRGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvc2stZG91YmxlLWhlYWRlci5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdza0RvdWJsZUhlYWRlcicsIFNrRG91YmxlSGVhZGVyRGlyZWN0aXZlKTtcblxuY29uc3QgU2tUb2tlbkJveERpcmVjdGl2ZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvZGlyZWN0aXZlcy9jb21tb25zL3NrLXRva2VuLWJveC5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdza1Rva2VuQm94JywgU2tUb2tlbkJveERpcmVjdGl2ZSk7XG5cbmNvbnN0IFNrSWNvRGV0YWlsc0JveERpcmVjdGl2ZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvZGlyZWN0aXZlcy9jb21tb25zL3NrLWljby1kZXRhaWxzLWJveC5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdza0ljb0RldGFpbHNCb3gnLCBTa0ljb0RldGFpbHNCb3hEaXJlY3RpdmUpO1xuXG5jb25zdCBTa1JpZ2h0U2lkZW5hdkRpcmVjdGl2ZSA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvZGlyZWN0aXZlcy9jb21tb25zL3NrLXJpZ2h0LXNpZGVuYXYuZGlyZWN0aXZlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmRpcmVjdGl2ZSgnc2tSaWdodFNpZGVuYXYnLCBTa1JpZ2h0U2lkZW5hdkRpcmVjdGl2ZSk7XG5cbmNvbnN0IFNrQ2lyY2xlUGllQ2hhcnREaXJlY3RpdmUgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2RpcmVjdGl2ZXMvY29tbW9ucy9zay1jaXJjbGUtcGllLWNoYXJ0LmRpcmVjdGl2ZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5kaXJlY3RpdmUoJ3NrQ2lyY2xlUGllQ2hhcnQnLCBTa0NpcmNsZVBpZUNoYXJ0RGlyZWN0aXZlKTtcblxuY29uc3QgU2tSZW1pbmRlcnNCb3hEaXJlY3RpdmUgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2RpcmVjdGl2ZXMvY29tbW9ucy9zay1yZW1pbmRlcnMtYm94LmRpcmVjdGl2ZScpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5kaXJlY3RpdmUoJ3NrUmVtaW5kZXJzQm94JywgU2tSZW1pbmRlcnNCb3hEaXJlY3RpdmUpO1xuXG5jb25zdCBTa1VzZXJJbmZvQm94RGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvc2stdXNlci1pbmZvLWJveC5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdza1VzZXJJbmZvQm94JywgU2tVc2VySW5mb0JveERpcmVjdGl2ZSk7XG5cbmNvbnN0IFNrS3ljUmVxdWlyZW1lbnRzQm94RGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvc2sta3ljLXJlcXVpcmVtZW50cy1ib3guZGlyZWN0aXZlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmRpcmVjdGl2ZSgnc2tLeWNSZXF1aXJlbWVudHNCb3gnLCBTa0t5Y1JlcXVpcmVtZW50c0JveERpcmVjdGl2ZSk7XG5cbmNvbnN0IFNjcm9sbFRvRW5kRGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvc2Nyb2xsLXRvLWVuZC5kaXJlY3RpdmUnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuZGlyZWN0aXZlKCdzY3JvbGxUb0VuZCcsIFNjcm9sbFRvRW5kRGlyZWN0aXZlKTtcblxuY29uc3QgQ29weVRvQ2xpcGJvYXJkRGlyZWN0aXZlID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9kaXJlY3RpdmVzL2NvbW1vbnMvY29weS10by1jbGlwYm9hcmQuZGlyZWN0aXZlJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmRpcmVjdGl2ZSgnY29weVRvQ2xpcGJvYXJkJywgQ29weVRvQ2xpcGJvYXJkRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBjb250cm9sbGVyc1xuICovXG5cbi8qKlxuICogY29tbW9uc1xuICovXG5jb25zdCBUZXJtc0RpYWxvZ0NvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2NvbW1vbnMvZGlhbG9ncy90ZXJtcy1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ1Rlcm1zRGlhbG9nQ29udHJvbGxlcicsIFRlcm1zRGlhbG9nQ29udHJvbGxlcik7XG5cbmNvbnN0IFN0YXJ0dXBHdWlkZURpYWxvZ0NvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2NvbW1vbnMvZGlhbG9ncy9zdGFydHVwLWd1aWRlLWNvbnRyb2xsZXIuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29udHJvbGxlcignU3RhcnR1cEd1aWRlRGlhbG9nQ29udHJvbGxlcicsIFN0YXJ0dXBHdWlkZURpYWxvZ0NvbnRyb2xsZXIpO1xuXG5jb25zdCBSZWNlaXZlVG9rZW5EaWFsb2dDb250cm9sbGVyID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb250cm9sbGVycy9jb21tb25zL2RpYWxvZ3MvcmVjZWl2ZS10b2tlbi1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ1JlY2VpdmVUb2tlbkRpYWxvZ0NvbnRyb2xsZXInLCBSZWNlaXZlVG9rZW5EaWFsb2dDb250cm9sbGVyKTtcblxuY29uc3QgU2VuZFRva2VuRGlhbG9nQ29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvY29tbW9ucy9kaWFsb2dzL3NlbmQtdG9rZW4tY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdTZW5kVG9rZW5EaWFsb2dDb250cm9sbGVyJywgU2VuZFRva2VuRGlhbG9nQ29udHJvbGxlcik7XG5cbmNvbnN0IFVwZGF0ZURpYWxvZ0NvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2NvbW1vbnMvZGlhbG9ncy91cGRhdGUtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdVcGRhdGVEaWFsb2dDb250cm9sbGVyJywgVXBkYXRlRGlhbG9nQ29udHJvbGxlcik7XG5cbi8qKlxuICogZ3Vlc3RcbiAqL1xuY29uc3QgR3Vlc3RMYXlvdXRDb250cm9sbGVyID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb250cm9sbGVycy9ndWVzdC9sYXlvdXQtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdHdWVzdExheW91dENvbnRyb2xsZXInLCBHdWVzdExheW91dENvbnRyb2xsZXIpO1xuXG5jb25zdCBHdWVzdExvYWRpbmdDb250cm9sbGVyID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb250cm9sbGVycy9ndWVzdC9sb2FkaW5nLWNvbnRyb2xsZXIuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29udHJvbGxlcignR3Vlc3RMb2FkaW5nQ29udHJvbGxlcicsIEd1ZXN0TG9hZGluZ0NvbnRyb2xsZXIpO1xuXG4vKipcbiAqIGNvbnN0IHdhbGxldFxuICovXG5jb25zdCBHdWVzdEltcG9ydFdhbGxldENvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2d1ZXN0L2ltcG9ydC9pbXBvcnQtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdHdWVzdEltcG9ydFdhbGxldENvbnRyb2xsZXInLCBHdWVzdEltcG9ydFdhbGxldENvbnRyb2xsZXIpO1xuXG5jb25zdCBHdWVzdEltcG9ydEtleXN0b3JlQ29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvZ3Vlc3QvaW1wb3J0L2tleXN0b3JlLWNvbnRyb2xsZXIuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29udHJvbGxlcignR3Vlc3RJbXBvcnRLZXlzdG9yZUNvbnRyb2xsZXInLCBHdWVzdEltcG9ydEtleXN0b3JlQ29udHJvbGxlcik7XG5cbmNvbnN0IEd1ZXN0SW1wb3J0UHJpdmF0ZUtleUNvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2d1ZXN0L2ltcG9ydC9wcml2YXRlLWtleS1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ0d1ZXN0SW1wb3J0UHJpdmF0ZUtleUNvbnRyb2xsZXInLCBHdWVzdEltcG9ydFByaXZhdGVLZXlDb250cm9sbGVyKTtcblxuLyoqXG4gKiBjcmVhdGUgd2FsbGV0XG4gKi9cbmNvbnN0IEd1ZXN0S2V5c3RvcmVDcmVhdGVTdGVwMUNvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2d1ZXN0L2NyZWF0ZS9zdGVwLTEtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdHdWVzdEtleXN0b3JlQ3JlYXRlU3RlcDFDb250cm9sbGVyJywgR3Vlc3RLZXlzdG9yZUNyZWF0ZVN0ZXAxQ29udHJvbGxlcik7XG5cbmNvbnN0IEd1ZXN0S2V5c3RvcmVDcmVhdGVTdGVwMkNvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2d1ZXN0L2NyZWF0ZS9zdGVwLTItY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdHdWVzdEtleXN0b3JlQ3JlYXRlU3RlcDJDb250cm9sbGVyJywgR3Vlc3RLZXlzdG9yZUNyZWF0ZVN0ZXAyQ29udHJvbGxlcik7XG5cbmNvbnN0IEd1ZXN0S2V5c3RvcmVDcmVhdGVTdGVwM0NvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2d1ZXN0L2NyZWF0ZS9zdGVwLTMtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdHdWVzdEtleXN0b3JlQ3JlYXRlU3RlcDNDb250cm9sbGVyJywgR3Vlc3RLZXlzdG9yZUNyZWF0ZVN0ZXAzQ29udHJvbGxlcik7XG5cbmNvbnN0IEd1ZXN0S2V5c3RvcmVDcmVhdGVTdGVwNENvbnRyb2xsZXIgPSByZXF1aXJlQXBwTW9kdWxlKCdhbmd1bGFyL2NvbnRyb2xsZXJzL2d1ZXN0L2NyZWF0ZS9zdGVwLTQtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdHdWVzdEtleXN0b3JlQ3JlYXRlU3RlcDRDb250cm9sbGVyJywgR3Vlc3RLZXlzdG9yZUNyZWF0ZVN0ZXA0Q29udHJvbGxlcik7XG5cblxuLyoqXG4gKiBtZW1iZXJcbiAqL1xuY29uc3QgTWVtYmVyTGF5b3V0Q29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvbWVtYmVyL2xheW91dC1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ01lbWJlckxheW91dENvbnRyb2xsZXInLCBNZW1iZXJMYXlvdXRDb250cm9sbGVyKTtcblxuY29uc3QgTWVtYmVyUmlnaHRTaWRlbmF2Q29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvbWVtYmVyL3JpZ2h0LXNpZGVuYXYtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdNZW1iZXJSaWdodFNpZGVuYXZDb250cm9sbGVyJywgTWVtYmVyUmlnaHRTaWRlbmF2Q29udHJvbGxlcik7XG5cbi8qKlxuICogc2V0dXBcbiAqL1xuY29uc3QgTWVtYmVyU2V0dXBWaWV3S2V5c3RvcmVDb250cm9sbGVyID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb250cm9sbGVycy9tZW1iZXIvc2V0dXAvdmlldy1rZXlzdG9yZS1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ01lbWJlclNldHVwVmlld0tleXN0b3JlQ29udHJvbGxlcicsIE1lbWJlclNldHVwVmlld0tleXN0b3JlQ29udHJvbGxlcik7XG5cbmNvbnN0IE1lbWJlclNldHVwQ2hvb3NlQ29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvbWVtYmVyL3NldHVwL2Nob29zZS1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ01lbWJlclNldHVwQ2hvb3NlQ29udHJvbGxlcicsIE1lbWJlclNldHVwQ2hvb3NlQ29udHJvbGxlcik7XG5cbmNvbnN0IE1lbWJlclNldHVwQ29tcGxldGVkQ29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvbWVtYmVyL3NldHVwL2NvbXBsZXRlZC1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ01lbWJlclNldHVwQ29tcGxldGVkQ29udHJvbGxlcicsIE1lbWJlclNldHVwQ29tcGxldGVkQ29udHJvbGxlcik7XG5cbi8qKlxuICogZGFzaGJvYXJkXG4gKi9cbmNvbnN0IE1lbWJlckRhc2hib2FyZE1haW5Db250cm9sbGVyID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb250cm9sbGVycy9tZW1iZXIvZGFzaGJvYXJkL21haW4tY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdNZW1iZXJEYXNoYm9hcmRNYWluQ29udHJvbGxlcicsIE1lbWJlckRhc2hib2FyZE1haW5Db250cm9sbGVyKTtcblxuLyoqXG4gKiB3YWxsZXRcbiAqL1xuY29uc3QgTWFuYWdlVG9rZW5Db250cm9sbGVyID0gcmVxdWlyZUFwcE1vZHVsZSgnYW5ndWxhci9jb250cm9sbGVycy9tZW1iZXIvd2FsbGV0L21hbmFnZS10b2tlbi1jb250cm9sbGVyLmpzJyk7XG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLmNvbnRyb2xsZXIoJ01hbmFnZVRva2VuQ29udHJvbGxlcicsIE1hbmFnZVRva2VuQ29udHJvbGxlcik7XG5cbi8qKlxuICogTWFya2V0cGxhY2VcbiAqL1xuY29uc3QgTWVtYmVyTWFya2V0cGxhY2VJY29JdGVtQ29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvbWVtYmVyL21hcmtldHBsYWNlL2ljby9pdGVtLWNvbnRyb2xsZXIuanMnKTtcbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29udHJvbGxlcignTWVtYmVyTWFya2V0cGxhY2VJY29JdGVtQ29udHJvbGxlcicsIE1lbWJlck1hcmtldHBsYWNlSWNvSXRlbUNvbnRyb2xsZXIpO1xuXG5jb25zdCBNZW1iZXJNYXJrZXRwbGFjZUljb0FjY2VwdFRlcm1zQ29udHJvbGxlciA9IHJlcXVpcmVBcHBNb2R1bGUoJ2FuZ3VsYXIvY29udHJvbGxlcnMvbWVtYmVyL21hcmtldHBsYWNlL2ljby9hY2NlcHQtdGVybXMtY29udHJvbGxlci5qcycpO1xuYW5ndWxhci5tb2R1bGUoJ2t5Yy13YWxsZXQnKS5jb250cm9sbGVyKCdNZW1iZXJNYXJrZXRwbGFjZUljb0FjY2VwdFRlcm1zQ29udHJvbGxlcicsIE1lbWJlck1hcmtldHBsYWNlSWNvQWNjZXB0VGVybXNDb250cm9sbGVyKTtcblxuLyoqXG4gKiBjb25maWcgc3RhdGVzXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdreWMtd2FsbGV0JykuY29uZmlnKGFwcFN0YXRlcyk7XG5cbi8qKlxuICogY29uZmlnIHJ1blxuICovXG5hbmd1bGFyLm1vZHVsZSgna3ljLXdhbGxldCcpLnJ1bihhcHBSdW4pO1xuXG4vKipcbiAqIGJvb3RzdHJhcCBhcHBcbiAqL1xuLypcbmFuZ3VsYXIuYm9vdHN0cmFwKGRvY3VtZW50LCBbJ2t5Yy13YWxsZXQnXSwge1xuICBzdHJpY3REaTogdHJ1ZVxufSk7XG4qL1xuIl19